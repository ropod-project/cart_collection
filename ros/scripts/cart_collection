#!/usr/bin/python

import rospy
import actionlib

from ropod_ros_msgs.msg import DockAction, DockFeedback, DockResult
from ropod_ros_msgs.msg import Status

from pyftsm.ftsm import FTSMStates, FTSMTransitions
from ropod.ftsm.ftsm_base import FTSMBase, DependMonitorTypes

from cart_collection.cart_collection_sm import CartCollectionSM
from cart_drop_off.cart_drop_off_sm import CartDropOffSM
from cart_collection.cart_redock_sm import CartRedockSM

from cart_collection.cart_collection_utils import send_feedback

class CartCollection(FTSMBase):
    def __init__(self):
        component_name = 'cart_collector'
        dependencies = ['roscore', 'world_model_mediator', 'cart_plane_detector']
        dependency_monitors = {'functional': {'roscore': 'ros/ros_master_monitor',
                                              'world_model_mediator': 'ros/ros_node_monitor',
                                              'cart_plane_detector': 'ros/ros_node_monitor'}}
        super(CartCollection, self).__init__(component_name, dependencies, dependency_monitors)
        self.current_action = None

    def init(self):
        try:
            rospy.loginfo('[cart_collection] Creating a "collect_cart" action server')
            self.collect_cart_server = actionlib.SimpleActionServer("collect_cart",
                                                            DockAction,
                                                            self.collect_cart_server_cb, False)
            self.collect_cart_server.start()
        except Exception as exc:
            rospy.logerr('[cart_collection] Initialisation error: "{0}"'.format(str(exc)))
            return FTSMTransitions.INIT_FAILED

        return FTSMTransitions.INITIALISED

    def ready(self):
        if not self.current_action:
            return FTSMTransitions.WAIT
        return FTSMTransitions.RUN

    def running(self):
        if not self.current_action:
            return FTSMTransitions.DONE
        return FTSMTransitions.CONTINUE

    def recovering(self):
        return FTSMTransitions.DONE_RECOVERING

    def start_cb(self, *args, **kwargs):
        sm_state = args[1][0]
        action_request = args[2]
        send_feedback(action_request.action, self.collect_cart_server, sm_state=sm_state)

    def transition_cb(self, *args, **kwargs):
        sm_state = args[1][0]
        action_request = args[2]
        send_feedback(action_request.action, self.collect_cart_server, sm_state=sm_state)

    def collect_cart_server_cb(self, action_request):
        action_type = action_request.action.type
        if action_type != 'DOCK' and action_type != 'UNDOCK' and action_type != 'REDOCK':
            rospy.logerr('[cart_collection] Unknown action "{0}" received; ignoring request'.format(action_type))
            self.collect_cart_server.set_aborted()
            return
        if (len(action_request.action.areas) == 0 or
            len(action_request.action.areas[0].sub_areas) == 0):
            # no need to specify area / sub area for REDOCK
            if (action_type == 'DOCK' or action_type == 'UNDOCK'):
                rospy.logerr('[cart_collection] A sub_area has to be specified for (un)docking; aborting request')
                self.collect_cart_server.set_aborted()
                return

        # setting self.current_action allows to
        # transition to the running state
        self.current_action = action_request.action

        if (action_type == 'DOCK'):
            sm = CartCollectionSM(cart_area=action_request.action.areas[0].id,
                    cart_sub_area=action_request.action.areas[0].sub_areas[0].id,
                    action_req=action_request.action,
                    action_server=self.collect_cart_server)
        elif (action_type == 'UNDOCK'):
            sm = CartDropOffSM(cart_area=action_request.action.areas[0].id,
                    cart_sub_area=action_request.action.areas[0].sub_areas[0].id,
                    action_req=action_request.action,
                    action_server=self.collect_cart_server)
        elif (action_type == 'REDOCK'):
            sm = CartRedockSM(action_req=action_request.action,
                              action_server=self.collect_cart_server)

        sm.register_transition_cb(self.transition_cb, [action_request])
        sm.register_start_cb(self.start_cb, [action_request])

        res = sm.execute()
        result = DockResult()
        if (res == 'failed'):
            if (action_type == 'DOCK' or action_type == 'REDOCK'):
                feedback_status = Status.DOCKING_SEQUENCE_FAILED
            else:
                feedback_status = Status.UNDOCKING_SEQUENCE_FAILED
            send_feedback(action_request.action, self.collect_cart_server, feedback_status)
            result.success = False
            self.collect_cart_server.set_succeeded(result=result)
        else:
            if (action_type == 'DOCK' or action_type == 'REDOCK'):
                feedback_status = Status.DOCKING_SEQUENCE_SUCCEEDED
            else:
                feedback_status = Status.UNDOCKING_SEQUENCE_SUCCEEDED
            send_feedback(action_request.action, self.collect_cart_server, feedback_status)
            result.success = True
            self.collect_cart_server.set_succeeded(result=result)


def main():
    rospy.init_node('cart_collection')
    cart_collection = CartCollection()
    try:
        cart_collection.run()
        while cart_collection.is_running and not rospy.is_shutdown():
            rospy.sleep(0.1)
    except (KeyboardInterrupt, SystemExit):
        rospy.loginfo('{0} interrupted exiting...'.format(cart_collection.name))
        cart_collection.stop()

if __name__ == "__main__":
    main()
